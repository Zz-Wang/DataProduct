ro_22 <- solve(ro22)
t <- ro_11 %*% ro12 %*% ro_22 %*% t(ro12) %*% ro_11
sqrt(eigen(t)$values)
a <- ro_11 * eigen(t)$vectors
a
ro_11
a <- ro_11 %*% eigen(t)$vectors
a
b <- ro_22 %*% t(ro12) %*% a
b
iris <- read.table("C://Users/User/Documents/R/T11-5.txt")
View(iris)
plot(iris$V2, iris$V4, color=V5)
plot(iris$V2, iris$V4, color=iris$V5)
qplot(iris$V2, iris$V4, color=iris$V5)
library(qqplot2)
library(qqplot)
library(ggplot2)
warnings()
qplot(iris$V2, iris$V4, color=iris$V5)
class(iris$V5)
qplot(iris$V2, iris$V4, color=is.factor(iris$V5))
qplot(iris$V2, iris$V4, color=as.factor(iris$V5))
install.packages("rrcov")
library(rrcov)
Wilks.test(x, grouping=grp, method="c")
Wilks.test(cbind(iris$V2, iris$V4), grouping=as.factor(iris$V5), method="c")
split(iris, as.factor(iris$V5))
iris_1 <- split(iris, as.factor(iris$V5))
mean(iris_1)
mean(iris_1$`1`)
class(iris_1)
sapply(split(iris[:2,4], as.factor(iris$V5)), mean)
sapply(split(iris, as.factor(iris$V5)), mean)
iris <- read.table("C://Users/User/Documents/R/T11-5.txt")
sapply(split(iris, as.factor(iris$V5)), mean)
class(iris)
class(iris[,1])
sapply(split(iris, iris$V5), mean)
sapply(split(as.numeric(iris), iris$V5), mean)
sapply(split(geochem[1:2],geochem$ocean),mean)
by(iris, iris$V5, mean)
iris <- read.table("C://Users/User/Documents/R/T11-5.txt")
iris
class(iis)
class(iris)
by(drop(iris), iris$V5, mean)
by(drop(iris), iris$V5, mean(drop=TRUE))
by(drop(iris), iris$V5, mean)
class(iris$V1)
mean(iris$V1)
by(cbind(iris$V2, iris$V4), iris$V5, mean)
split(iris, iris$V5)
mean(split(iris, iris$V5))
mean(split(iris$'1', iris$V5))
library(plyr)
ddply(iris, .(col1, col2), transform, Average=mean(score))
library(plyr)
ddply(iris, transform, Average=mean(score))
library(plyr)
ddply(iris, iris$V5, Average=mean(score))
ddply(.iris, .iris$V5, mean)
ddply(iris, .iris$V5, mean)
ddply(iris, iris$V5, mean)
ddply(iris, as.factor(iris$V5), mean)
iris
ddply(iris, .(iris$V5), mean)
library(plyr)
# Run the functions length, mean, and sd on the value of "change" for each group,
# broken down by sex + condition
cdata <- ddply(data, c("sex", "condition"), summarise,
N    = length(change),
mean = mean(change),
sd   = sd(change),
se   = sd / sqrt(N) )
library(plyr)
# Run the functions length, mean, and sd on the value of "change" for each group,
# broken down by sex + condition
cdata <- ddply(data, c("sex", "condition"), summarise, N    = length(change),mean = mean(change), sd   = sd(change), se   = sd / sqrt(N) )
cdata <- aggregate(data["iris"], by=data[iris$V5)], FUN=length)
cdata <- aggregate(data["iris"], by=data[iris$V5], FUN=length)
cdata <- aggregate(data["iris"], by=iris$V5, FUN=length)
cdata <- aggregate(iris, by=iris$V5, FUN=length)
cdata <- aggregate(iris, by=as.factor(iris$V5), FUN=length)
mean(iris[1:50])
mean(iris[1:50,])
iris[1,]
class(iris[1,])
mean(iris[1,])
mean(as.numeric(iris[1,]))
mean(as.numeric(iris[1:50,]))
mean(as.numeric(unlist(iris[1:50,])))
as.numeric(unlist(iris[1:50,]))
iris_1 <- iris[iris$V5==1]
iris_1 <- iris[V5==1]
iris_1 <- iris[iris$V5==1]
iris_1 <- iris[which(iris$V5==1)]
iris_1 <- iris[which(V5==1)]
iris <- read.table("C://Users/User/Documents/R/T11-5.txt")
iris_1 <- iris[which(V5==1)]
iris <- iris[c(-1, -3)]
iris
View(iris)
iris_1 <- iris[which(V5==1), ]
iris_1 <- iris[which(iris$V5==1), ]
iris_1
mean(iris_1)
summary(iris_1)
sd(iris_1)
iris_2 <- iris[which(iris$V5==2), ]
iris_3 <- iris[which(iris$V5==3), ]
summary(iris_2)
summary(iris_3)
salmon <- read.table("C://Users/User/Documents/R/T11-2.txt")
qplot(salmon$V3,salmon$V4, color=as.factor(iris$V1))
qplot(salmon$V3,salmon$V4, color=as.factor(salmon$V1))
sd(cbind(salmon$V3,salmon$V4))
sd(salmon)
cbind(salmon$V3,salmon$V4)
var(cbind(salmon$V3,salmon$V4)
)
var(iris_1)
mean(salmon)
mean(cbind(salmon$V3,salmon$V4))
salmon_1 <- salmon[which(salmon$V1==1), ]
View(salmon_1)
salmon_2 <- salmon[which(salmon$V1==2), ]
mean(salmon_1)
summary(salmon_1)
summary(salmon_2)
var(cbind(salmon$V3,salmon$V4))
sd(cbind(salmon$V3,salmon$V4))
dif <- [98.38-137.46, 429.66-366.62]
dif <- c(98.38-137.46, 429.66-366.62)
dif
spool <- matrix(c(293.35, -27.29, -27.29, 1146.17), nrow=2)
spool
solve(spool)
a <- t(dif) %*% solve(spool)
a
t(a) * c(98.38+137.46, 429.66+366.62) /2
t(a) %*% c(98.38+137.46, 429.66+366.62) /2
a %*% c(98.38+137.46, 429.66+366.62) /2
iris <- read.table("C://Users/User/Documents/R/T11-5.txt")
qplot(iris$V2, iris$V4, color=as.factor(iris$V5))
Wilks.test(cbind(iris$V2, iris$V4), grouping=as.factor(iris$V5), method="c")
iris <- iris[c(-1, -3)]
iris_1 <- iris[which(iris$V5==1), ]
iris_2 <- iris[which(iris$V5==2), ]
iris_3 <- iris[which(iris$V5==3), ]
d <- dist(as.matrix(mtcars))
d
women <- read.table("C://Users/User/Documents/R/T1-9.txt")
women
dist(women[1:7])
womendata <- women[1:7]
womendata
?dist
dist(womendata)
dim(dist(womendata))
zz <- dist(womendata)
size(zz)
class(zz)
hc.complete <- hclust(zz)
hc.complete
hc.complete <- hclust(zz method= "complete")
hc.complete <- hclust(zz, method= "complete")
hc.single <- hclust(zz, method= "single")
plot(hc.single, main = "Hierarchical Clustering(Single)", cex = 0.9)
jpeg(HC_single.jpg')
plot(hc.single, main = "Hierarchical Clustering(Single)", cex = 0.9)
dev.off()
)
jpeg('HC_single.jpg')
plot(hc.single, main = "Hierarchical Clustering(Single)", cex = 0.9)
dev.off()
jpeg('HC_complete.jpg')
plot(hc.complete, main = "Hierarchical Clustering(Single)", cex = 0.9)
dev.off()
jpeg('HC_complete.jpg')
plot(hc.complete, main = "Hierarchical Clustering(Complete)", cex = 0.9)
dev.off()
km <- kmeans(x, 2)
plot(womendata, col(km$cluster+1))
km <- kmeans(womendata, 2)
plot(womendata, col(km$cluster+1))
plot(womendata, col=(km$cluster+1))
plot(km)
km <- kmeans(womendata, 2)
plot(km)
plot(womendata, col = km$cluster)
km <- kmeans(womendata, 6)
plot(womendata, col = km$cluster)
library(cluster)
library(cluster)
clusplot(womendata, km$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
sat <- read.table("C://Users/User/Documents/R/T21-15.txt")
sat <- read.table("C://Users/User/Documents/R/T12-15.txt")
sat
library(ca)
install.packages("ca")
library(ca)
mytable <- with(mydata, table(A,B)) # create a 2 way table
fit <- ca(sat)
sat
fit <- ca(sat[,2:4])
print(fit) # basic results
summary(fit) # extended results
plot(fit) # symmetric map
summary(fit) # extended results
plot(fit, mass = TRUE, contrib = "absolute", map =
"rowgreen", arrows = c(FALSE, TRUE)) # asymmetric map
plot(fit) # symmetric map
print(fit) # basic results
row.names(sat) <- c(income, very dissatisfied, somewhat dissatisfied, moderately satisfied, very satisfied)
row.names(sat) <- c("income", "very dissatisfied", "somewhat dissatisfied", "moderately satisfied", "very satisfied")
col.names(sat) <- c("income", "very dissatisfied", "somewhat dissatisfied", "moderately satisfied", "very satisfied")
colnames(sat) <- c("income", "very dissatisfied", "somewhat dissatisfied", "moderately satisfied", "very satisfied")
sat <- read.table("C://Users/User/Documents/R/T12-15.txt")
colnames(sat) <- c("income", "very dissatisfied", "somewhat dissatisfied", "moderately satisfied", "very satisfied")
sat
fit <- ca(sat[,2:4])
print(fit) # basic results
summary(fit) # extended results
plot(fit) # symmetric map
jpeg('CA_fit.jpg')
plot(fit) # symmetric map
dev.off()
sat[,2:4]
sat <- read.table("C://Users/User/Documents/R/T12-15.txt")
# Correspondence Analysis
library(ca)
colnames(sat) <- c("income", "very dissatisfied", "somewhat dissatisfied", "moderately satisfied", "very satisfied")
#mytable <- with(mydata, table(A,B)) # create a 2 way table
#prop.table(mytable, 1) # row percentages
#prop.table(mytable, 2) # column percentages
fit <- ca(sat[,2:5])
print(fit) # basic results
#summary(fit) # extended results
jpeg('CA_fit.jpg')
plot(fit) # symmetric map
dev.off()
plot(fit, mass = TRUE, contrib = "absolute", map =
"rowgreen", arrows = c(FALSE, TRUE)) # asymmetric map
jpeg('CA_coor.jpg')
plot(fit, mass = TRUE, contrib = "absolute", map =
"rowgreen", arrows = c(FALSE, TRUE)) # asymmetric map
dev.off()
sessionInfo()
options(rpubs.upload.method = "internal")
options(RCurlOptions = list(verbose = FALSE, capath = system.file("CurlSSL", "cacert.pem", package = "RCurl"), ssl.verifypeer = FALSE))
library(Rcurl)
install.packages("Rcurl")
install.packages("RCurl")
install.packages("bitops")
library(bitops)
library(RCurl)
install.packages("lubridate")
#Q4
library(lubridate)
library(forecast)
dat = read.csv("./gaData.csv")
training = dat[year(dat$date)==2011,]
tstrain = ts(training$visitsTumblr)
testing = dat[year(dat$date)>2011,]
test = dat[year(dat$date) > 2011,]
pred <- forecast(fit, h=length(test$visitsTumblr),level=c(80,95))
fcast <- forecast(fit)
plot(fcast)
accuracy(fcast,test$visitsTumblr)
modBats <- bats(tstrain)
pred <- forecast(modBats, h=length(testing$visitsTumblr),level=c(80,95))
accuracy <- 1-sum(testing$visitsTumblr>pred$upper[,2])/length(testing$visitsTumblr)
accuracy <- 1-sum(test$visitsTumblr>pred$upper[,2])/length(test$visitsTumblr)
dat = read.csv("./gaData.csv")
training = dat[year(dat$date)==2011,]
tstrain = ts(training$visitsTumblr)
testing = dat[year(dat$date)>2011,]
test = dat[year(dat$date) > 2011,]
pred <- forecast(fit, h=length(test$visitsTumblr),level=c(80,95))
fcast <- forecast(fit)
plot(fcast)
accuracy(fcast,test$visitsTumblr)
modBats <- bats(tstrain)
pred <- forecast(modBats, h=length(testing$visitsTumblr),level=c(80,95))
accuracy <- 1-sum(testing$visitsTumblr>pred$upper[,2])/length(testing$visitsTumblr)
accuracy <- 1-sum(test$visitsTumblr>pred$upper[,2])/length(test$visitsTumblr)
install.packages("forecast")
library(lubridate)
library(forecast)
dat = read.csv("./gaData.csv")
training = dat[year(dat$date)==2011,]
tstrain = ts(training$visitsTumblr)
testing = dat[year(dat$date)>2011,]
test = dat[year(dat$date) > 2011,]
pred <- forecast(fit, h=length(test$visitsTumblr),level=c(80,95))
fcast <- forecast(fit)
plot(fcast)
accuracy(fcast,test$visitsTumblr)
modBats <- bats(tstrain)
#Q5
library(e1071)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
svmFit <- svm(CompressiveStrength ~ ., data = training)
svmPred <- predict(svmFit,testing)
accuracy(svmPred, testing$CompressiveStrength)
#Q5
library(e1071)
set.seed(3523)
library(AppliedPredictiveModeling)
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
svmFit <- svm(CompressiveStrength ~ ., data = training)
svmPred <- predict(svmFit,testing)
accuracy(svmPred, testing$CompressiveStrength)
#Q3
set.seed(3523)
library(AppliedPredictiveModeling)
library(lars)
library(elasticnet)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
#var <- names(training) %in% c("CompressiveStrength")
#x <- training[!var]
#object <- enet(as.matrix(x), as.vector(training$CompressiveStrength),lambda=1)
#png("now.png", width = 1280, height = 780)
#par(mar=c(1,1,1,1))
#plot(object, xvar = "step")
#dev.off()
lassoFit <- train( training$CompressiveStrength ~ ., method="lasso", data=training)
lassoPred <- predict(lassoFit,testing)
plot.enet(lassoFit$finalModel, xvar="penalty", use.color=T)
lassoFit$finalModel
library("devtools", lib.loc="C:/Users/User/Documents/R/win-library/3.0")
install.packages("rtools")
install.packages("Rtools")
install.packages("Rtools")
library(shiny)
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
intall.packages("shiny")
install.packages("shiny")
install.packages("shiny")
A is not necessarily a projectio
shinyapps::setAccountInfo(name='zz-wang', token='4297000CDC64A518E93E64F7E4F80A30', secret='C8aSCFo02X5gMAGND03V015MCDz8Lo4tZqTT9g2E')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
install.packages("rCharts")
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE)
print(d)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(shiny)
library(slidify)
library(knitr)
setwd("c://Users//User//Documents//GitHub//DataProduct//")
runApp()
runApp("displaymode=showcase")
runApp(display.mode="showcase")
library(ISLR)
data(auto)
data(Auto)
head(Atto_)
head(Auto)
runApp(display.mode="showcase")
numericInput("id1", "Numeric input, labeled id1", 0, min = 1, max = 7, step = 1)
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
numericInput("How many features do you want?", 1, min = 1, max = 7, step = 1)
),
runApp(display.mode="showcase")
runApp(display.mode="showcase")
h5("Top N features you chose"),
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
data(auto)
data(Auto)
head(Auto)
Auto$mpg
head(Auto[2:8])
runApp()
runApp(display.mode="showcase")
class(Auto[2:8])
class(Auto[2])
class(Auto[3])
class(Auto[4])
class(Auto[5])
class(Auto[1])
runApp(display.mode="showcase")
class(Auto[2:8])
class(Auto[1])
ncol(Auto[2:8])
lm(Auto[1]~ Auto[2:8])
lm(data.fram(Auto[1])~ Auto[2:8])
lm(data.frame(Auto[1])~ Auto[2:8])
lm(Auto$mpg~ Auto[2:8])
Auto <- Auto[-9]
head(Auto)
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
?names
runApp(display.mode="showcase")
cbind(Auto$cylinders, Auto$displacement,
Auto$horsepower, Auto$weight,
Auto$acceleration, Auto$year,
Auto$origin), Auto$mpg)
cbind(Auto$cylinders, Auto$displacement,
Auto$horsepower, Auto$weight,
Auto$acceleration, Auto$year,
Auto$origin)
?colnames
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='zz-wang',
token='4297000CDC64A518E93E64F7E4F80A30',
secret='<SECRET>')
shinyapps::setAccountInfo(name='zz-wang',
token='4297000CDC64A518E93E64F7E4F80A30',
secret='<SECRET>')
shinyapps::setAccountInfo(name='zz-wang',token='4297000CDC64A518E93E64F7E4F80A30',secret='<SECRET>')
shinyapps::setAccountInfo(name='zz-wang', token='4297000CDC64A518E93E64F7E4F80A30', secret='C8aSCFo02X5gMAGND03V015MCDz8Lo4tZqTT9g2E')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
deployApp()
install.packages("rmarkdown")
library(rmarkdown)
deployApp()
browseURL("first_deck/index.html")
browseURL("first_deck/index.Rmd")
browseURL("first_deck/index.Rmd")
browseURL("first_deck/index.html")
slidify(index.Rmd)
slidify("first_deck/index.Rmd")
browseURL("first_deck/index.html")
slidify("first_deck/index.Rmd")
browseURL("first_deck/index.html")
slidify("first_deck/index.Rmd")
browseURL("first_deck/index.html")
slidify("first_deck/index.Rmd")
slidify("first_deck/index.Rmd")
browseURL("first_deck/index.html")
slidify("first_deck/index.Rmd")
browseURL("first_deck/index.html")
slidify("first_deck/index.Rmd")
browseURL("first_deck/index.html")
slidify("first_deck/index.Rmd")
browseURL("first_deck/index.html")
slidify("first_deck/index.Rmd")
browseURL("first_deck/index.html")
slidify("first_deck/index.Rmd")
browseURL("first_deck/index.html")
browseURL("first_deck/index.html")
slidify("first_deck/index.Rmd")
browseURL("first_deck/index.html")
slidify("first_deck/index.Rmd")
slidify("first_deck/index.Rmd")
browseURL("first_deck/index.html")
slidify("first_deck/index.Rmd")
browseURL("first_deck/index.html")
slidify("first_deck/index.Rmd")
browseURL("first_deck/index.html")
slidify("first_deck/index.Rmd")
browseURL("first_deck/index.html")
slidify("first_deck/index.Rmd")
browseURL("first_deck/index.html")
publish(title = 'Data_product', 'index.html', host = 'rpubs')
publish(title = 'Data_product', 'first_deck/index.html', host = 'rpubs')
readBin
